"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[1942],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(y,i(i({ref:t},c),{},{components:r})):n.createElement(y,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6942:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),i=["components"],l={title:"<AvPayerSelect />"},p=void 0,s={unversionedId:"form/select/components/payer-select",id:"form/select/components/payer-select",title:"<AvPayerSelect />",description:"A select list that automatically loads and pages through payers for supported transactionTypes when the user scrolls down.",source:"@site/docs/form/select/components/payer-select.md",sourceDirName:"form/select/components",slug:"/form/select/components/payer-select",permalink:"/availity-react/form/select/components/payer-select",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/select/components/payer-select.md",tags:[],version:"current",frontMatter:{title:"<AvPayerSelect />"},sidebar:"someSidebar",previous:{title:"<AvOrganizationSelect />",permalink:"/availity-react/form/select/components/organization-select"},next:{title:"Getting Started",permalink:"/availity-react/form/upload/"}},c={},u=[{value:"Example",id:"example",level:3},{value:"Live example: Storybook",id:"live-example-storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>customerId: string</code>",id:"customerid-string",level:4},{value:"<code>region: string</code>",id:"region-string",level:4},{value:"<code>tranTypeCode: string</code>",id:"trantypecode-string",level:4}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A select list that automatically loads and pages through payers for supported transactionTypes when the user scrolls down."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form } from '@availity/form';\nimport { AvPayerSelect } from '@availity/select';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      organizations: '',\n    }}\n    onSubmit={(values) => apiResource.submit(values)}\n    validationSchema={yup.object().shape({\n      organizations: yup.string().isRequired('This field is required.'),\n    })}\n  >\n    <AvPayerSelect\n      id=\"payers\"\n      name=\"payers\"\n      parameters={{\n        region: 'FL',\n        tranTypeCode: '1',\n      }}\n      customerId=\"12345\"\n    />\n    <Button color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n")),(0,o.kt)("h4",{id:"live-example-storybook"},"Live example: ",(0,o.kt)("a",{parentName:"h4",href:"https://availity.github.io/availity-react/storybook/?path=/story/formik-select-resources--avpayerselect"},"Storybook")),(0,o.kt)("h3",{id:"props"},"Props"),(0,o.kt)("p",null,"Extends ",(0,o.kt)("a",{parentName:"p",href:"/form/select/components/resource-select/#props"},"ResourceSelect Props"),"."),(0,o.kt)("h4",{id:"customerid-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"customerId: string")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"extended-payers")," API from ",(0,o.kt)("inlineCode",{parentName:"p"},"aries")," requires a ",(0,o.kt)("inlineCode",{parentName:"p"},"customerId")," prop that must be a string. The ",(0,o.kt)("inlineCode",{parentName:"p"},"AvPayerSelect")," will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"customerId")," prop in the request header, X-Availity-Customer-Id, of the ",(0,o.kt)("inlineCode",{parentName:"p"},"all")," call to ",(0,o.kt)("inlineCode",{parentName:"p"},"extended-payers"),". This is necessary for the ",(0,o.kt)("inlineCode",{parentName:"p"},"AvPayerSelect")," select to only contain payers that are accesible and related to the organization specified, and not all the organizations that the user belongs."),(0,o.kt)("p",null,"Example: customerId: '12345'"),(0,o.kt)("h4",{id:"region-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"region: string")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"extended-payers")," API from ",(0,o.kt)("inlineCode",{parentName:"p"},"aries")," requires a ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," param that must be a string. When ",(0,o.kt)("inlineCode",{parentName:"p"},"AvPayerSelect")," has a ",(0,o.kt)("inlineCode",{parentName:"p"},"region")," prop, then the results of the ",(0,o.kt)("inlineCode",{parentName:"p"},"all")," call to ",(0,o.kt)("inlineCode",{parentName:"p"},"extended-payers")," will be filtered, containing only payers that are accessible from that region. This is necessary for the ",(0,o.kt)("inlineCode",{parentName:"p"},"AvPayerSelect")," select to only contain payers for that user's current region in the app, instead of all the payers from every region."),(0,o.kt)("p",null,"Example: region: 'FL'"),(0,o.kt)("h4",{id:"trantypecode-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"tranTypeCode: string")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"extended-payers")," API from ",(0,o.kt)("inlineCode",{parentName:"p"},"aries")," requires a ",(0,o.kt)("inlineCode",{parentName:"p"},"tranTypeCode")," prop that must be a string. Currently only the following transaction type codes are supported ",(0,o.kt)("inlineCode",{parentName:"p"},"1, 2, 3, 5"),". Additionally ",(0,o.kt)("inlineCode",{parentName:"p"},"EBREACT")," has been added to support payer list for E&B react payers. by the backing API. This will be passed as a request param so that the results of the ",(0,o.kt)("inlineCode",{parentName:"p"},"all")," call to ",(0,o.kt)("inlineCode",{parentName:"p"},"extended-payers")," will be filtered, containing only payers that have either a security resource or EPDM route for the specified transaction type code."),(0,o.kt)("p",null,"Example: tranTypeCode: '1'"))}m.isMDXComponent=!0}}]);