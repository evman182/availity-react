"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[6997],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(a),u=o,g=m["".concat(d,".").concat(u)]||m[u]||c[u]||i;return a?n.createElement(g,r(r({ref:t},p),{},{components:a})):n.createElement(g,r({ref:t},p))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2491:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var n=a(3117),o=a(102),i=(a(7294),a(3905)),r=["components"],l={title:"Badge"},d=void 0,s={unversionedId:"components/badge",id:"components/badge",title:"Badge",description:"This library contains specialized Badges, utilizing Reactstrap Badge.",source:"@site/docs/components/badge.mdx",sourceDirName:"components",slug:"/components/badge",permalink:"/availity-react/components/badge",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/badge.mdx",tags:[],version:"current",frontMatter:{title:"Badge"},sidebar:"someSidebar",previous:{title:"PaginationContext",permalink:"/availity-react/components/pagination/context"},next:{title:"Progress",permalink:"/availity-react/components/progress"}},p={},c=[{value:"Installation",id:"installation",level:3},{value:"Removable Badge",id:"removable-badge",level:2},{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"<code>RemovableBadge</code> Props",id:"removablebadge-props",level:3},{value:"<code>value: string</code>",id:"value-string",level:4},{value:"<code>onRemove: (value: string) =&gt; void</code>",id:"onremove-value-string--void",level:4},{value:"Removable Badge List",id:"removable-badge-list",level:2},{value:"Example",id:"example-1",level:3},{value:"<code>RemovableBadgeList</code> Props",id:"removablebadgelist-props",level:3},{value:"<code>onRemove: (badges: BadgeItem[]) =&gt; void</code>",id:"onremove-badges-badgeitem--void",level:4},{value:"<code>BadgeItem</code> Props",id:"badgeitem-props",level:3},{value:"<code>value: string</code>",id:"value-string-1",level:4},{value:"<code>displayText: string</code>",id:"displaytext-string",level:4},{value:"<code>color: string</code>",id:"color-string",level:4},{value:"<code>order: number</code>",id:"order-number",level:4}],m={toc:c};function u(e){var t=e.components,a=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This library contains specialized Badges, utilizing Reactstrap Badge."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@availity/badge"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@availity/badge.svg?style=for-the-badge",alt:"Version"}))),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"NPM"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @availity/badge reactstrap@^8.0.0\n")),(0,i.kt)("p",null,"Yarn"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @availity/badge reactstrap@^8.0.0\n")),(0,i.kt)("h2",{id:"removable-badge"},"Removable Badge"),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport RemovableBadge from '@availity/badge';\n\nconst Example = () => (\n  <RemovableBadge\n    key={badge.value}\n    color={badge.color}\n    value={badge.value}\n    onRemove={remove}\n  >\n    {displayText}\n  </RemovableBadge>\n);\n")),(0,i.kt)("h4",{id:"live-example"},"Live example"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/story/components-badge-removable-badge--default"},"Storybook")),(0,i.kt)("h3",{id:"removablebadge-props"},(0,i.kt)("inlineCode",{parentName:"h3"},"RemovableBadge")," Props"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<RemovableBadge/>")," contains all of the ",(0,i.kt)("inlineCode",{parentName:"p"},"BadgeProp")," from Reactstrap, in addition to the following."),(0,i.kt)("h4",{id:"value-string"},(0,i.kt)("inlineCode",{parentName:"h4"},"value: string")),(0,i.kt)("p",null,"This is a unique value for the badge, which is passed up to the ",(0,i.kt)("inlineCode",{parentName:"p"},"onRemove")," function to describe which badge is being removed."),(0,i.kt)("h4",{id:"onremove-value-string--void"},(0,i.kt)("inlineCode",{parentName:"h4"},"onRemove: (value: string) => void")),(0,i.kt)("p",null,"This is the function that is called whenever the 'X' icon is clicked. It passes the value of the specified badge to the parent component."),(0,i.kt)("h2",{id:"removable-badge-list"},"Removable Badge List"),(0,i.kt)("p",null,"This component allows you to specify a list of badges and handles removing the badge from the badge list."),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { RemovableBadgeList, BadgeItem } from '@availity/badge';\n\nconst Example = () => {\n  const defaultBadgeList: BadgeItem[] = [\n    { value: '1', color: 'primary', displayText: 'Test 1' },\n    { value: '2', color: 'success', displayText: 'Test 2' },\n    { value: '3', color: 'danger', displayText: 'Test 3' },\n    { value: '4', color: 'warning', displayText: 'Test 4' },\n    { value: '5', color: 'info', displayText: 'Test 5' },\n    { value: '6', color: 'light', displayText: 'Test 6' },\n    { value: '7', color: 'dark', displayText: 'Test 7' },\n    { value: '8', displayText: 'Test 9' },\n  ];\n  const [badgeList, setBadgeList] = useState<BadgeItem[]>(defaultBadgeList);\n\n  const remove = () => {\n    setBadgeList(defaultBadgeList);\n  };\n\n  const onRemoveBadge = (badgeList: BadgeItem[]) => {\n    setBadgeList(badgeList);\n  };\n\n  return <RemovableBadgeList badges={badgeList} onRemove={onRemoveBadge} />;\n};\n")),(0,i.kt)("h3",{id:"removablebadgelist-props"},(0,i.kt)("inlineCode",{parentName:"h3"},"RemovableBadgeList")," Props"),(0,i.kt)("h4",{id:"onremove-badges-badgeitem--void"},(0,i.kt)("inlineCode",{parentName:"h4"},"onRemove: (badges: BadgeItem[]) => void")),(0,i.kt)("p",null,"This is the function that is called whenever a badge in the list has been removed. It passes in the current badge list, after the badge has been removed."),(0,i.kt)("h3",{id:"badgeitem-props"},(0,i.kt)("inlineCode",{parentName:"h3"},"BadgeItem")," Props"),(0,i.kt)("h4",{id:"value-string-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"value: string")),(0,i.kt)("p",null,"This is a unique value for the badge, which is passed up to the ",(0,i.kt)("inlineCode",{parentName:"p"},"onRemove")," function to describe which badge is being removed."),(0,i.kt)("h4",{id:"displaytext-string"},(0,i.kt)("inlineCode",{parentName:"h4"},"displayText: string")),(0,i.kt)("p",null,"This is the text that will be displayed in the badge."),(0,i.kt)("h4",{id:"color-string"},(0,i.kt)("inlineCode",{parentName:"h4"},"color: string")),(0,i.kt)("p",null,"The color of the badge. Refer to the Reactstrap documentation to determine which colors are available."),(0,i.kt)("h4",{id:"order-number"},(0,i.kt)("inlineCode",{parentName:"h4"},"order: number")),(0,i.kt)("p",null,"Optionally display the badges in a specified order."))}u.isMDXComponent=!0}}]);