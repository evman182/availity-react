"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[8669],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1657:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),l=["components"],o={title:"Feature"},s=void 0,p={unversionedId:"components/feature",id:"components/feature",title:"Feature",description:"Check environment features for the current environment to determine if a particular feature is enabled.",source:"@site/docs/components/feature.mdx",sourceDirName:"components",slug:"/components/feature",permalink:"/availity-react/components/feature",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/feature.mdx",tags:[],version:"current",frontMatter:{title:"Feature"},sidebar:"someSidebar",previous:{title:"useFavorites",permalink:"/availity-react/components/favorites/hook"},next:{title:"Getting Started",permalink:"/availity-react/components/feedback/"}},d={},u=[{value:"Installation",id:"installation",level:3},{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>features: string | string[] | string[][]</code>",id:"features-string--string--string",level:4},{value:"<code>loader?: boolean | ReactNode</code>",id:"loader-boolean--reactnode",level:4},{value:"<code>whenDisabled?: ReactNode</code>",id:"whendisabled-reactnode",level:4},{value:"<code>children?: ReactNode</code>",id:"children-reactnode",level:4},{value:"<code>negate?: boolean</code>",id:"negate-boolean",level:4},{value:"isFeatureEnabled",id:"isfeatureenabled",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:4},{value:"generate-features-json (CLI)",id:"generate-features-json-cli",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"As npm script",id:"as-npm-script",level:4},{value:"features.json",id:"featuresjson",level:3}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Check environment features for the current environment to determine if a particular feature is enabled."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@availity/feature"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@availity/feature.svg?style=for-the-badge",alt:"Version"}))),(0,i.kt)("p",null,"Note: Only works with OpenShift deployed applications using the standard pipeline"),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"npm"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @availity/feature axios --save\n")),(0,i.kt)("p",null,"Yarn"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @availity/feature axios\n")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Feature from '@availity/feature';\n\nconst Example = () => (\n  <Feature\n    features={[\n      'AV-1234',\n      'AV-2345',\n      ['AV-3456', 'AV-4567'],\n      ['AV-5678', 'AV-6789'],\n    ]}\n  >\n    {/* stuff to render if the feature indicated\n      above is enabled in the environment */}\n  </Feature>\n);\n")),(0,i.kt)("h4",{id:"live-example"},"Live example"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/story/components-feature--default"},"Storybook")),(0,i.kt)("p",null,"Component which validates the environment's features to determine if children content should be shown."),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)("h4",{id:"features-string--string--string"},(0,i.kt)("inlineCode",{parentName:"h4"},"features: string | string[] | string[][]")),(0,i.kt)("p",null,"Can either be a string, eg: ",(0,i.kt)("inlineCode",{parentName:"p"},'"AV-1234"')," or an array containing feature ID strings as well as other arrays which contain feature ID strings, eg: ",(0,i.kt)("inlineCode",{parentName:"p"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"),". The items in a nested array indicate feature IDs that must ",(0,i.kt)("em",{parentName:"p"},"all")," be enabled for a feature to be considered enabled (see ",(0,i.kt)("inlineCode",{parentName:"p"},"children"),') - they act as "AND". The items in the top of the array act as "OR" - if ',(0,i.kt)("em",{parentName:"p"},"any")," are enabled, the feature is considered enabled. The example ",(0,i.kt)("inlineCode",{parentName:"p"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]")," is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"'AV-1234' OR 'AV-2345' OR ('AV-3456' && 'AV-4567') OR ('AV-5678' && 'AV-6789')"),"."),(0,i.kt)("h4",{id:"loader-boolean--reactnode"},(0,i.kt)("inlineCode",{parentName:"h4"},"loader?: boolean | ReactNode")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BlockUi")," is used when loading the features. When a ",(0,i.kt)("inlineCode",{parentName:"p"},"node"),", that node is rendered instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"BlockUi")," when loading the features. When ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", nothing is rendered when loading the features. ",(0,i.kt)("strong",{parentName:"p"},"Default:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h4",{id:"whendisabled-reactnode"},(0,i.kt)("inlineCode",{parentName:"h4"},"whenDisabled?: ReactNode")),(0,i.kt)("p",null,"The content that renders when the features are disabled."),(0,i.kt)("h4",{id:"children-reactnode"},(0,i.kt)("inlineCode",{parentName:"h4"},"children?: ReactNode")),(0,i.kt)("p",null,"The content that renders when the features are enabled."),(0,i.kt)("h4",{id:"negate-boolean"},(0,i.kt)("inlineCode",{parentName:"h4"},"negate?: boolean")),(0,i.kt)("p",null,"Negate the feature. If the feature specified is enabled, it acts as if it were disabled (by rendering the ",(0,i.kt)("inlineCode",{parentName:"p"},"whenDisabled")," prop content). If the feature specified is disabled, it acts as if it were enabled (by rendering the ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," prop content)."),(0,i.kt)("h3",{id:"isfeatureenabled"},"isFeatureEnabled"),(0,i.kt)("p",null,"Function that validates the environment's features to determine if children content should be shown."),(0,i.kt)("h4",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"features")),": String, or an array containing strings. Required.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"string"),": The feature ID, eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"'AV-1234'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"array"),": The array can contain feature ID strings as well as other arrays which contain feature ID strings, eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"),". The items in a nested array indicate feature IDs that must ",(0,i.kt)("em",{parentName:"li"},"all")," be enabled for a feature to be considered enabled (see ",(0,i.kt)("inlineCode",{parentName:"li"},"children"),') - they act as "AND". The items in the top of the array act as "OR" - if ',(0,i.kt)("em",{parentName:"li"},"any")," are enabled, the feature is considered enabled. The example ",(0,i.kt)("inlineCode",{parentName:"li"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]")," is similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"'AV-1234' || 'AV-2345' || ('AV-3456' && 'AV-4567') || ('AV-5678' && 'AV-6789')"),".")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,"A promise that can be awaited and resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," indicating whether the feature(s) are enabled or not."),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { isFeatureEnabled } from '@availity/feature';\n\nasync () => {\n  const enabled = await isFeatureEnabled('AV-1234');\n  if (!enabled) return;\n  // do stuff, this feature is enabled!\n};\n")),(0,i.kt)("h3",{id:"generate-features-json-cli"},"generate-features-json (CLI)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"generate-features-json")," is a CLI tool that takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"features.json")," file and outputs environment specific ",(0,i.kt)("inlineCode",{parentName:"p"},"features.json")," files to be used depending on which environment it's currently in. Note: This is where OpenShift comes into play. OpenShift ensures the right file (based on the ENV) is placed in the right location when the pod starts."),(0,i.kt)("h4",{id:"arguments-1"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"path-to-features.json")),": Directory path or file location. Optional. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"project/config/features.json"),". If a directory path, a ",(0,i.kt)("inlineCode",{parentName:"li"},"features.json")," file must exist in the directory. If a file location, it must be a ",(0,i.kt)("inlineCode",{parentName:"li"},".json")," file. Note: Follow the example ",(0,i.kt)("inlineCode",{parentName:"li"},"features.json")," file for what the contents of the file should be."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"path-to-build-dist")),": Directory path. Optional. Default: if ",(0,i.kt)("inlineCode",{parentName:"li"},"NODE_ENV"),' is "production" ',(0,i.kt)("inlineCode",{parentName:"li"},"dist/features"),", else ",(0,i.kt)("inlineCode",{parentName:"li"},"build/features"),". The location to output the various environment specific JSON files. Note: OpenShift is looking for the ",(0,i.kt)("inlineCode",{parentName:"li"},"features")," directory in the web root of the image, so if this value is changed, ensure that the resulting image has the ",(0,i.kt)("inlineCode",{parentName:"li"},"features")," directory.")),(0,i.kt)("h4",{id:"usage-1"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"generate-features-json\ngenerate-features-json ./features.json\ngenerate-features-json other-path dist/features\n")),(0,i.kt)("h4",{id:"as-npm-script"},"As npm script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "build": "av build && generate-features-json"\n  }\n}\n')),(0,i.kt)("p",null,"with extra parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "build": "av build && generate-features-json ./features.json"\n  }\n}\n')),(0,i.kt)("h3",{id:"featuresjson"},"features.json"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"features.json"),' file is a single file that details "features" and the environments that each feature is ',(0,i.kt)("strong",{parentName:"p"},"disabled")," in. Typically, the name of the feature is the JIRA ticket number that the feature was developed for. This helps identify what the feature does by just knowing the name.\nPossible ",(0,i.kt)("inlineCode",{parentName:"p"},"disabledEnvironments")," values are ",(0,i.kt)("inlineCode",{parentName:"p"},'"DEV"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"STAGE"'),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'"PRD"'),". These values line up with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ENV")," environment variable within OpenShift."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "PREC-4597",\n    "description": "https://jira.availity.com:8443/browse/PREC-4597",\n    "disabledEnvironments": ["PRD"]\n  },\n  {\n    "name": "CB-675",\n    "description": "https://jira.availity.com:8443/browse/PREC-4597",\n    "disabledEnvironments": ["STAGE", "PRD"]\n  }\n]\n')),(0,i.kt)("p",null,"The environment specific ",(0,i.kt)("inlineCode",{parentName:"p"},"features.json")," files that get generated are a simple array of disabled feature names. The above example produces a ",(0,i.kt)("inlineCode",{parentName:"p"},"PRD.json")," with ",(0,i.kt)("inlineCode",{parentName:"p"},'["PREC-4597", "CB-675"]')," and ",(0,i.kt)("inlineCode",{parentName:"p"},"STAGE.json")," with ",(0,i.kt)("inlineCode",{parentName:"p"},'["CB-675"]'),"."),(0,i.kt)("p",null,"Enabling and disabling features does require a deployment, but with the OpenShift CI/CD process, that ",(0,i.kt)("em",{parentName:"p"},"should")," be painless."))}m.isMDXComponent=!0}}]);