"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[1544],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,b=u["".concat(d,".").concat(m)]||u[m]||s[m]||o;return n?a.createElement(b,l(l({ref:t},c),{},{components:n})):a.createElement(b,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2162:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),l=["components"],i={title:"<Field />"},d=void 0,p={unversionedId:"form/components/field",id:"form/components/field",title:"<Field />",description:"Input field wrapped in additional features such as label, feedback, grid options, etc",source:"@site/docs/form/components/field.md",sourceDirName:"form/components",slug:"/form/components/field",permalink:"/availity-react/form/components/field",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/components/field.md",tags:[],version:"current",frontMatter:{title:"<Field />"},sidebar:"someSidebar",previous:{title:"<Feedback />",permalink:"/availity-react/form/components/feedback"},next:{title:"<FormGroup />",permalink:"/availity-react/form/components/form-group"}},c={},s=[{value:"Example",id:"example",level:3},{value:"Live example: Storybook",id:"live-example-storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>tag?: React.ComponentType | string</code>",id:"tag-reactcomponenttype--string",level:4},{value:"<code>label?: React.ReactNode</code>",id:"label-reactreactnode",level:4},{value:"<code>labelHidden? boolean</code>",id:"labelhidden-boolean",level:4},{value:"<code>required? boolean</code>",id:"required-boolean",level:4},{value:"<code>disabled? boolean</code>",id:"disabled-boolean",level:4},{value:"<code>readOnly? boolean</code>",id:"readonly-boolean",level:4},{value:"<code>size? string</code>",id:"size-string",level:4},{value:"<code>inputClass?: string</code>",id:"inputclass-string",level:4},{value:"<code>labelClass?: string</code>",id:"labelclass-string",level:4},{value:"<code>helpId?: string</code>",id:"helpid-string",level:4},{value:"<code>helpMessage?: React.ReactNode</code>",id:"helpmessage-reactreactnode",level:4},{value:"<code>labelAttrs?: React.HTMLAttributes&lt;HTMLLabelElement&gt;</code>",id:"labelattrs-reacthtmlattributeshtmllabelelement",level:4},{value:"<code>groupAttrs?: FormGroupProps</code>",id:"groupattrs-formgroupprops",level:4},{value:"<code>grid?: object</code>",id:"grid-object",level:4},{value:"<code>children?: ({ input: React.ReactNode, feedback: React.ReactNode }) =&gt; React.ReactNode</code>",id:"children--input-reactreactnode-feedback-reactreactnode---reactreactnode",level:4},{value:"<code>append?: React.ReactNode | string</code>",id:"append-reactreactnode--string",level:4},{value:"<code>prepend?: React.ReactNode | string</code>",id:"prepend-reactreactnode--string",level:4}],u={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Input field wrapped in additional features such as label, feedback, grid options, etc"),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form, Field } from '@availity/form';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      hello: '',\n    }}\n    onSubmit={(values) => alert(JSON.stringify(values))}\n    validationSchema={yup.object({\n      hello: yup.string().isRequired(true),\n    })}\n  >\n    <Field name=\"hello\" label=\"Greeting\" required />\n    <Button type=\"submit\" color=\"primary\">\n      Submit\n    </Button>\n  </Form>\n);\n")),(0,o.kt)("h4",{id:"live-example-storybook"},"Live example: ",(0,o.kt)("a",{parentName:"h4",href:"https://availity.github.io/availity-react/storybook/?path=/story/formik-form--field"},"Storybook")),(0,o.kt)("h3",{id:"props"},"Props"),(0,o.kt)("h4",{id:"name-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"name: string")),(0,o.kt)("p",null,"Identifies the field and matches the validation schema."),(0,o.kt)("h4",{id:"tag-reactcomponenttype--string"},(0,o.kt)("inlineCode",{parentName:"h4"},"tag?: React.ComponentType | string")),(0,o.kt)("p",null,"The Node or tag to substitute as the input field. Default is reactstrap ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," tag."),(0,o.kt)("h4",{id:"label-reactreactnode"},(0,o.kt)("inlineCode",{parentName:"h4"},"label?: React.ReactNode")),(0,o.kt)("p",null,"Contents of the field label. Renders within a Reactstrap ",(0,o.kt)("inlineCode",{parentName:"p"},"<Label />"),"."),(0,o.kt)("h4",{id:"labelhidden-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"labelHidden? boolean")),(0,o.kt)("p",null,"Used to hide the label."),(0,o.kt)("h4",{id:"required-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"required? boolean")),(0,o.kt)("p",null,"Will add ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-required")," to input, will add ",(0,o.kt)("inlineCode",{parentName:"p"},"<RequiredAsterisk />")," to label."),(0,o.kt)("h4",{id:"disabled-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"disabled? boolean")),(0,o.kt)("p",null,"Disable the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Field />"),"."),(0,o.kt)("h4",{id:"readonly-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"readOnly? boolean")),(0,o.kt)("p",null,"Mark the field as read only."),(0,o.kt)("h4",{id:"size-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"size? string")),(0,o.kt)("p",null,"Size of the input field. Potential values: ",(0,o.kt)("inlineCode",{parentName:"p"},'"lg"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"sm"')),(0,o.kt)("h4",{id:"inputclass-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"inputClass?: string")),(0,o.kt)("p",null,"Class names passed to the input tag."),(0,o.kt)("h4",{id:"labelclass-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"labelClass?: string")),(0,o.kt)("p",null,"Class names passed to the label tag."),(0,o.kt)("h4",{id:"helpid-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"helpId?: string")),(0,o.kt)("p",null,"Help topic id, adds ",(0,o.kt)("inlineCode",{parentName:"p"},"<FieldHelpIcon/>")," next to the label (should not be within label for accessibility)."),(0,o.kt)("h4",{id:"helpmessage-reactreactnode"},(0,o.kt)("inlineCode",{parentName:"h4"},"helpMessage?: React.ReactNode")),(0,o.kt)("p",null,"Display info text below the field"),(0,o.kt)("h4",{id:"labelattrs-reacthtmlattributeshtmllabelelement"},(0,o.kt)("inlineCode",{parentName:"h4"},"labelAttrs?: React.HTMLAttributes<HTMLLabelElement>")),(0,o.kt)("p",null,"Pass additional attributes to the label"),(0,o.kt)("h4",{id:"groupattrs-formgroupprops"},(0,o.kt)("inlineCode",{parentName:"h4"},"groupAttrs?: FormGroupProps")),(0,o.kt)("p",null,"Pass additional attributes to ",(0,o.kt)("a",{parentName:"p",href:"/form/components/form-group/#props"},"Form Group")),(0,o.kt)("h4",{id:"grid-object"},(0,o.kt)("inlineCode",{parentName:"h4"},"grid?: object")),(0,o.kt)("p",null,"Object mapping number of columns to the label and input."),(0,o.kt)("h4",{id:"children--input-reactreactnode-feedback-reactreactnode---reactreactnode"},(0,o.kt)("inlineCode",{parentName:"h4"},"children?: ({ input: React.ReactNode, feedback: React.ReactNode }) => React.ReactNode")),(0,o.kt)("p",null,"Optionally override the way the input is rendered with child render prop."),(0,o.kt)("h4",{id:"append-reactreactnode--string"},(0,o.kt)("inlineCode",{parentName:"h4"},"append?: React.ReactNode | string")),(0,o.kt)("p",null,"Append an InputAddon to the end of the Input."),(0,o.kt)("h4",{id:"prepend-reactreactnode--string"},(0,o.kt)("inlineCode",{parentName:"h4"},"prepend?: React.ReactNode | string")),(0,o.kt)("p",null,"Append an InputAddon to the start of the Input."))}m.isMDXComponent=!0}}]);