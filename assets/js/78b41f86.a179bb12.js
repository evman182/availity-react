"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[4540],{3905:function(e,o,r){r.d(o,{Zo:function(){return u},kt:function(){return m}});var t=r(7294);function n(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}function a(e,o){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var o=1;o<arguments.length;o++){var r=null!=arguments[o]?arguments[o]:{};o%2?a(Object(r),!0).forEach((function(o){n(e,o,r[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(r,o))}))}return e}function i(e,o){if(null==e)return{};var r,t,n=function(e,o){if(null==e)return{};var r,t,n={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||(n[r]=e[r]);return n}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=t.createContext({}),d=function(e){var o=t.useContext(p),r=o;return e&&(r="function"==typeof e?e(o):l(l({},o),e)),r},u=function(e){var o=d(e.components);return t.createElement(p.Provider,{value:o},e.children)},c={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},s=t.forwardRef((function(e,o){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=d(r),m=n,f=s["".concat(p,".").concat(m)]||s[m]||c[m]||a;return r?t.createElement(f,l(l({ref:o},u),{},{components:r})):t.createElement(f,l({ref:o},u))}));function m(e,o){var r=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=s;var i={};for(var p in o)hasOwnProperty.call(o,p)&&(i[p]=o[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var d=2;d<a;d++)l[d]=r[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},4735:function(e,o,r){r.r(o),r.d(o,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return c}});var t=r(3117),n=r(102),a=(r(7294),r(3905)),l=["components"],i={title:"<UploadProgressBar />"},p=void 0,d={unversionedId:"form/upload/upload-progress-bar",id:"form/upload/upload-progress-bar",title:"<UploadProgressBar />",description:"The raw progress bar to be used when making your own.",source:"@site/docs/form/upload/upload-progress-bar.md",sourceDirName:"form/upload",slug:"/form/upload/upload-progress-bar",permalink:"/availity-react/form/upload/upload-progress-bar",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/upload/upload-progress-bar.md",tags:[],version:"current",frontMatter:{title:"<UploadProgressBar />"},sidebar:"someSidebar",previous:{title:"<FilePickerBtn />",permalink:"/availity-react/form/upload/file-picker-btn"}},u={},c=[{value:"Example",id:"example",level:3},{value:"Props",id:"props",level:3},{value:"<code>upload?: UploadCore</code>",id:"upload-uploadcore",level:4},{value:"<code>onProgress?: (upload: UploadCore) =&gt; void</code>",id:"onprogress-upload-uploadcore--void",level:4},{value:"<code>onSuccess?: (upload: UploadCore) =&gt; void</code>",id:"onsuccess-upload-uploadcore--void",level:4},{value:"<code>onError?: (upload: UploadCore) =&gt; void</code>",id:"onerror-upload-uploadcore--void",level:4},{value:"<code>complete?: boolean</code>",id:"complete-boolean",level:4},{value:"<code>striped?: boolean</code>",id:"striped-boolean",level:4},{value:"<code>animated?: boolean</code>",id:"animated-boolean",level:4},{value:"<code>color?: string</code>",id:"color-string",level:4}],s={toc:c};function m(e){var o=e.components,r=(0,n.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},s,r,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The raw progress bar to be used when making your own."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { UploadProgressBar } from '@availity/upload';\n\nconst Example = () => <UploadProgressBar upload={uploadInstance} animated />;\n")),(0,a.kt)("h3",{id:"props"},"Props"),(0,a.kt)("h4",{id:"upload-uploadcore"},(0,a.kt)("inlineCode",{parentName:"h4"},"upload?: UploadCore")),(0,a.kt)("p",null,"The upload instance returned by creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"new Upload")," via ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Availity/sdk-js/tree/master/packages/upload-core#readme"},"upload-core"),"."),(0,a.kt)("h4",{id:"onprogress-upload-uploadcore--void"},(0,a.kt)("inlineCode",{parentName:"h4"},"onProgress?: (upload: UploadCore) => void")),(0,a.kt)("p",null,"Callback function to hook into the ",(0,a.kt)("inlineCode",{parentName:"p"},"onProgress")," within the Upload instance provided in the ",(0,a.kt)("inlineCode",{parentName:"p"},"upload")," prop."),(0,a.kt)("h4",{id:"onsuccess-upload-uploadcore--void"},(0,a.kt)("inlineCode",{parentName:"h4"},"onSuccess?: (upload: UploadCore) => void")),(0,a.kt)("p",null,"Callback function to hook into the ",(0,a.kt)("inlineCode",{parentName:"p"},"onSuccess")," within the Upload instance provided in the ",(0,a.kt)("inlineCode",{parentName:"p"},"upload")," prop."),(0,a.kt)("h4",{id:"onerror-upload-uploadcore--void"},(0,a.kt)("inlineCode",{parentName:"h4"},"onError?: (upload: UploadCore) => void")),(0,a.kt)("p",null,"Callback function to hook into the ",(0,a.kt)("inlineCode",{parentName:"p"},"onError")," within the Upload instance provided in the ",(0,a.kt)("inlineCode",{parentName:"p"},"upload")," prop."),(0,a.kt)("h4",{id:"complete-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"complete?: boolean")),(0,a.kt)("p",null,'Triggers the "complete" style in the progress bar. When true, a checkmark appears at the end of the progress bar.'),(0,a.kt)("h4",{id:"striped-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"striped?: boolean")),(0,a.kt)("p",null,'Triggers the "striped" style in the progress bar.'),(0,a.kt)("h4",{id:"animated-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"animated?: boolean")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," the progress bar has animated stripes while uploading is in progress."),(0,a.kt)("h4",{id:"color-string"},(0,a.kt)("inlineCode",{parentName:"h4"},"color?: string")),(0,a.kt)("p",null,"Color of the progress bar. ",(0,a.kt)("strong",{parentName:"p"},"Default:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"success")))}m.isMDXComponent=!0}}]);