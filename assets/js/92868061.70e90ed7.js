"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[2794],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),d=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=d(e.components);return o.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),k=a,m=u["".concat(p,".").concat(k)]||u[k]||c[k]||i;return n?o.createElement(m,r(r({ref:t},s),{},{components:n})):o.createElement(m,r({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9973:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var o=n(3117),a=n(102),i=(n(7294),n(3905)),r=["components"],l={title:"<SpacesLink />"},p=void 0,d={unversionedId:"components/spaces/spaces-link",id:"components/spaces/spaces-link",title:"<SpacesLink />",description:"The `` component is used to handle the complexities of configuration navigation. This includes standard links, legacy SSO links, and Magneto SSO links.",source:"@site/docs/components/spaces/spaces-link.md",sourceDirName:"components/spaces",slug:"/components/spaces/spaces-link",permalink:"/availity-react/components/spaces/spaces-link",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/spaces/spaces-link.md",tags:[],version:"current",frontMatter:{title:"<SpacesLink />"}},s={},c=[{value:"Example",id:"example",level:2},{value:"Props",id:"props",level:2},{value:"<code>spaceId?: string</code>",id:"spaceid-string",level:3},{value:"<code>space?: SanitizedSpace</code>",id:"space-sanitizedspace",level:3},{value:"<code>clientId?: string</code>",id:"clientid-string",level:3},{value:"<code>tag?: React.ComponentType | string;</code>",id:"tag-reactcomponenttype--string",level:3},{value:"<code>bodyTag?: React.ComponentType | string;</code>",id:"bodytag-reactcomponenttype--string",level:3},{value:"<code>titleTag: React.ComponentType | string</code>",id:"titletag-reactcomponenttype--string",level:3},{value:"<code>textTag: React.ComponentType | string</code>",id:"texttag-reactcomponenttype--string",level:3},{value:"<code>linkStyle?: string</code>",id:"linkstyle-string",level:3},{value:"<code>icon?: boolean</code>",id:"icon-boolean",level:3},{value:"<code>description?: boolean</code>",id:"description-boolean",level:3},{value:"<code>appIcon?: boolean</code>",id:"appicon-boolean",level:3},{value:"<code>favorite?: boolean</code>",id:"favorite-boolean",level:3},{value:"<code>body?: boolean</code>",id:"body-boolean",level:3},{value:"<code>showDate?: boolean</code>",id:"showdate-boolean",level:3},{value:"<code>showNew?: boolean</code>",id:"shownew-boolean",level:3},{value:"<code>size?: string</code>",id:"size-string",level:3},{value:"<code>stacked?: boolean</code>",id:"stacked-boolean",level:3},{value:"<code>loading?: boolean</code>",id:"loading-boolean",level:3},{value:"<code>maxDescriptionLength?: number</code>",id:"maxdescriptionlength-number",level:3},{value:"<code>skeletonProps?: object</code>",id:"skeletonprops-object",level:3},{value:"<code>linkAttributes?: object</code>",id:"linkattributes-object",level:3},{value:"<code>children?: React.ReactNode | (spacesContext: SpacesContext) =&gt; ReactNode</code>",id:"children-reactreactnode--spacescontext-spacescontext--reactnode",level:4},{value:"<code>card: boolean</code>",id:"card-boolean",level:3},{value:"<code>role: string</code>",id:"role-string",level:3},{value:"<code>analytics: object</code>",id:"analytics-object",level:3}],u={toc:c};function k(e){var t=e.components,n=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<SpacesLink />")," component is used to handle the complexities of configuration navigation. This includes standard links, legacy SSO links, and Magneto SSO links."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<SpacesLink />"),' also includes some additional functionality. Top Apps can be updated on click. Configuration favoriting can be handled. A "New!" badge can be displayed based on the configuration\'s activeDate. Images and Icons can also be displayed.'),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"NOTE: Using ",(0,i.kt)("inlineCode",{parentName:"p"},"<SpacesLink />")," depends on ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/overview"},(0,i.kt)("inlineCode",{parentName:"a"},"react-query")))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Spaces, { SpacesLink } from '@availity/spaces';\n\n<Spaces\n  spaceIds={['73162546201441126239486200007187']}\n  payerIds={['PayerID']}\n  clientId=\"my-client-id\"\n>\n  <SpacesLink spaceId=\"73162546201441126239486200007187\" body appIcon />\n</Spaces>;\n")),(0,i.kt)("h2",{id:"props"},"Props"),(0,i.kt)("h3",{id:"spaceid-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"spaceId?: string")),(0,i.kt)("p",null,"If no ",(0,i.kt)("inlineCode",{parentName:"p"},"spaceId")," is provided, the first space in the ",(0,i.kt)("inlineCode",{parentName:"p"},"spaces")," array is used. Note: This is only to be used when the Spaces provider should only ever contain a single space."),(0,i.kt)("h3",{id:"space-sanitizedspace"},(0,i.kt)("inlineCode",{parentName:"h3"},"space?: SanitizedSpace")),(0,i.kt)("p",null,"Use to directly pass a space to the component rather than have it fetched from the spaces API. This component does not have to be a child of a SpacesProvider."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: If you are wanting to take advantage of the sso links you will additionally need to pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"clientId")," in.")),(0,i.kt)("h3",{id:"clientid-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"clientId?: string")),(0,i.kt)("p",null,"Required when space is not provided, or space is provided and space contains an sso link."),(0,i.kt)("h3",{id:"tag-reactcomponenttype--string"},(0,i.kt)("inlineCode",{parentName:"h3"},"tag?: React.ComponentType | string;")),(0,i.kt)("p",null,"Tag to overwrite the root component rendered."),(0,i.kt)("h3",{id:"bodytag-reactcomponenttype--string"},(0,i.kt)("inlineCode",{parentName:"h3"},"bodyTag?: React.ComponentType | string;")),(0,i.kt)("p",null,"Tag to overwrite the body component that renders the title, description and date values. It defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"CardBody")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"div")," depending on the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"linkStyle")," prop."),(0,i.kt)("h3",{id:"titletag-reactcomponenttype--string"},(0,i.kt)("inlineCode",{parentName:"h3"},"titleTag: React.ComponentType | string")),(0,i.kt)("p",null,"Tag to overwrite the title component. If ",(0,i.kt)("inlineCode",{parentName:"p"},"linkStyle")," prop is set to ",(0,i.kt)("inlineCode",{parentName:"p"},'"card"'),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"CardTitle"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"linkStyle")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},'"list"'),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"ListGroupItemHeading"),". Otherwise, defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,i.kt)("h3",{id:"texttag-reactcomponenttype--string"},(0,i.kt)("inlineCode",{parentName:"h3"},"textTag: React.ComponentType | string")),(0,i.kt)("p",null,"Tag to overwrite the text component. If ",(0,i.kt)("inlineCode",{parentName:"p"},"linkStyle")," prop is set to ",(0,i.kt)("inlineCode",{parentName:"p"},'"card"'),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"CardText"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"linkStyle")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},'"list"'),", defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"ListGroupItemText"),". Otherwise, defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,i.kt)("h3",{id:"linkstyle-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"linkStyle?: string")),(0,i.kt)("p",null,"When passed in, provides predefined styles for the component. Possible values are ",(0,i.kt)("inlineCode",{parentName:"p"},"card"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),"."),(0,i.kt)("h3",{id:"icon-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"icon?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", renders an ",(0,i.kt)("inlineCode",{parentName:"p"},"@availity/icon")," next to the title if present on the space."),(0,i.kt)("h3",{id:"description-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"description?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", renders the ",(0,i.kt)("inlineCode",{parentName:"p"},"Spaces")," description beneath the title."),(0,i.kt)("h3",{id:"appicon-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"appIcon?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", renders an app icon to the left of the title and formats depending on the space information given."),(0,i.kt)("h3",{id:"favorite-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"favorite?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", renders the ",(0,i.kt)("inlineCode",{parentName:"p"},"FavoriteHeart")," component to the left of the Component. Note, this does require you to have wrapped your component somewhere in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Favorites")," Provider. This also requires the peerDependency ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/overview"},(0,i.kt)("inlineCode",{parentName:"a"},"react-query")),"."),(0,i.kt)("h3",{id:"body-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"body?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", renders the title, and allow for the description and date info to be added on. ",(0,i.kt)("em",{parentName:"p"},"Default:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"true")),(0,i.kt)("h3",{id:"showdate-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"showDate?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", renders the ",(0,i.kt)("inlineCode",{parentName:"p"},"activeDate")," of the space."),(0,i.kt)("h3",{id:"shownew-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"showNew?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),', renders a "New!" badge if the ',(0,i.kt)("inlineCode",{parentName:"p"},"activeDate")," is less than 30 days old."),(0,i.kt)("h3",{id:"size-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"size?: string")),(0,i.kt)("p",null,"Adjusts the icon size of the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppIcon")," if enabled."),(0,i.kt)("h3",{id:"stacked-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"stacked?: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", renders the component vertically."),(0,i.kt)("h3",{id:"loading-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"loading?: boolean")),(0,i.kt)("p",null,"Optionally pass in your own loading state for the component if you are managing the state yourself."),(0,i.kt)("h3",{id:"maxdescriptionlength-number"},(0,i.kt)("inlineCode",{parentName:"h3"},"maxDescriptionLength?: number")),(0,i.kt)("p",null,"Allows the description length to be truncated."),(0,i.kt)("h3",{id:"skeletonprops-object"},(0,i.kt)("inlineCode",{parentName:"h3"},"skeletonProps?: object")),(0,i.kt)("p",null,"Dimensions passed to loader to show while the image is loading."),(0,i.kt)("h3",{id:"linkattributes-object"},(0,i.kt)("inlineCode",{parentName:"h3"},"linkAttributes?: object")),(0,i.kt)("p",null,"Additional attributes you may want to tack onto the ",(0,i.kt)("inlineCode",{parentName:"p"},"native-form")," when submitting a SAML sso. i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"spaceId")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceApplicationId")),(0,i.kt)("h4",{id:"children-reactreactnode--spacescontext-spacescontext--reactnode"},(0,i.kt)("inlineCode",{parentName:"h4"},"children?: React.ReactNode | (spacesContext: SpacesContext) => ReactNode")),(0,i.kt)("p",null,"Children can be a react child or render prop."),(0,i.kt)("h3",{id:"card-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"card: boolean")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", utilizes the reactstrap ",(0,i.kt)("inlineCode",{parentName:"p"},"Card")," component for styling."),(0,i.kt)("h3",{id:"role-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"role: string")),(0,i.kt)("p",null,"Allows the role of the root component to be overwritten. If ",(0,i.kt)("inlineCode",{parentName:"p"},"linkStyle")," prop is set to ",(0,i.kt)("inlineCode",{parentName:"p"},'"list"'),', defaults to "listitem".'),(0,i.kt)("h3",{id:"analytics-object"},(0,i.kt)("inlineCode",{parentName:"h3"},"analytics: object")),(0,i.kt)("p",null,"When Analytics props are passed inside the analytics props, they will be passed down to the click item. For more information on Analytics props see: ",(0,i.kt)("a",{parentName:"p",href:"https://availity.github.io/sdk-js/resources/analytics#autotrack-logged-events"},"Autotrack Logged Events")))}k.isMDXComponent=!0}}]);