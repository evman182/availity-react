"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[774],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,f=c["".concat(d,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7957:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],o={title:"<DateRangeField />"},d=void 0,p={unversionedId:"form/date/components/date-range-field",id:"form/date/components/date-range-field",title:"<DateRangeField />",description:"The same as DateRange but with a Label that appears above the input and a Feedback that appears below the input.",source:"@site/docs/form/date/components/date-range-field.md",sourceDirName:"form/date/components",slug:"/form/date/components/date-range-field",permalink:"/availity-react/form/date/components/date-range-field",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/date/components/date-range-field.md",tags:[],version:"current",frontMatter:{title:"<DateRangeField />"},sidebar:"someSidebar",previous:{title:"<DateRange />",permalink:"/availity-react/form/date/components/date-range"},next:{title:"Getting Started",permalink:"/availity-react/form/phone/"}},s={},m=[{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>label?: string</code>",id:"label-string",level:4},{value:"<code>labelClass?: string</code>",id:"labelclass-string",level:4},{value:"<code>labelHidden?: boolean</code>",id:"labelhidden-boolean",level:4},{value:"<code>labelAttrs?: React.HTMLAttributes&lt;HTMLLabelElement&gt;</code>",id:"labelattrs-reacthtmlattributeshtmllabelelement",level:4},{value:"<code>helpId?: string</code>",id:"helpid-string",level:4},{value:"<code>required?: boolean</code>",id:"required-boolean",level:4}],c={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The same as ",(0,l.kt)("inlineCode",{parentName:"p"},"DateRange")," but with a ",(0,l.kt)("inlineCode",{parentName:"p"},"Label")," that appears above the input and a ",(0,l.kt)("inlineCode",{parentName:"p"},"Feedback")," that appears below the input."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form } from '@availity/form';\nimport { DateRangeField } from '@availity/date';\nimport '@availity/date/styles.scss';\nimport { Button } from 'reactstrap';\nimport { dateRange } from '@availity/yup';\nimport moment from 'moment';\nimport * as yup from 'yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      dateOfService: {\n        startDate: moment().format('YYYY-MM-DD'),\n        endDate: moment().format('YYYY-MM-DD'),\n      },\n    }}\n    onSubmit={(values) => console.log(values)}\n    validationSchema={yup.object().shape({\n      dateOfService: dateRange(\n        {\n          min: moment().subtract(7, 'day').format('MM/DD/YYYY'),\n          max: moment().add(7, 'day').format('MM/DD/YYYY'),\n          format: 'MM/DD/YYYY',\n        },\n        `Date must be between ${moment()\n          .subtract(7, 'day')\n          .format('MM/DD/YYYY')} and ${moment()\n          .add(7, 'day')\n          .format('MM/DD/YYYY')}`\n      )\n        .typeError('This field is invalid.')\n        .required('This field is required.'),\n    })}\n  >\n    <DateRangeField\n      id=\"dateOfService\"\n      label=\"Date of Service\"\n      name=\"dateOfService\"\n      min={{ value: 7, units: 'day' }}\n      max={{ value: 7, units: 'day' }}\n    />\n    <Button color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n")),(0,l.kt)("h4",{id:"live-example"},"Live example"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/docs/form-components-date--date-range-field"},"Storybook")),(0,l.kt)("h3",{id:"props"},"Props"),(0,l.kt)("p",null,"Extends ",(0,l.kt)("a",{parentName:"p",href:"/form/date/components/date-range#props"},"DateRange Props"),"."),(0,l.kt)("h4",{id:"name-string"},(0,l.kt)("inlineCode",{parentName:"h4"},"name: string")),(0,l.kt)("p",null,"The name of the field. Will be the key of the selected date that comes through in the values of the ",(0,l.kt)("inlineCode",{parentName:"p"},"onSubmit")," callback."),(0,l.kt)("h4",{id:"label-string"},(0,l.kt)("inlineCode",{parentName:"h4"},"label?: string")),(0,l.kt)("p",null,"The text that renders inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"Label")," above the input."),(0,l.kt)("h4",{id:"labelclass-string"},(0,l.kt)("inlineCode",{parentName:"h4"},"labelClass?: string")),(0,l.kt)("p",null,"The name of the class for the label. Will be passed to the ",(0,l.kt)("inlineCode",{parentName:"p"},"className")," prop of the label in the field."),(0,l.kt)("h4",{id:"labelhidden-boolean"},(0,l.kt)("inlineCode",{parentName:"h4"},"labelHidden?: boolean")),(0,l.kt)("p",null,"Used to control if the label is displayed. When set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", the label in the field won't be visible."),(0,l.kt)("h4",{id:"labelattrs-reacthtmlattributeshtmllabelelement"},(0,l.kt)("inlineCode",{parentName:"h4"},"labelAttrs?: React.HTMLAttributes<HTMLLabelElement>")),(0,l.kt)("p",null,"Pass additional attributes to the label"),(0,l.kt)("h4",{id:"helpid-string"},(0,l.kt)("inlineCode",{parentName:"h4"},"helpId?: string")),(0,l.kt)("p",null,"Help topic id, adds ",(0,l.kt)("inlineCode",{parentName:"p"},"<FieldHelpIcon/>")," next to the label (should not be within label for accessibility)."),(0,l.kt)("h4",{id:"required-boolean"},(0,l.kt)("inlineCode",{parentName:"h4"},"required?: boolean")),(0,l.kt)("p",null,"Will add ",(0,l.kt)("inlineCode",{parentName:"p"},"<RequiredAsterisk />")," to label."))}u.isMDXComponent=!0}}]);