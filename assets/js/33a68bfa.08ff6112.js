"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[4985],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,h=m["".concat(d,".").concat(u)]||m[u]||p[u]||l;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7772:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var a=n(3117),i=n(102),l=(n(7294),n(3905)),r=["components"],o={title:"Tree"},d=void 0,s={unversionedId:"components/tree",id:"components/tree",title:"Tree",description:"Version",source:"@site/docs/components/tree.mdx",sourceDirName:"components",slug:"/components/tree",permalink:"/availity-react/components/tree",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/tree.mdx",tags:[],version:"current",frontMatter:{title:"Tree"},sidebar:"someSidebar",previous:{title:"Training Link",permalink:"/availity-react/components/training-link"},next:{title:"Getting Started",permalink:"/availity-react/components/typography/"}},c={},p=[{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:3},{value:"Example",id:"example",level:4},{value:"Storybook",id:"storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>items: TreeItem[]</code>",id:"items-treeitem",level:4},{value:"<code>enableSearch?: boolean</code>",id:"enablesearch-boolean",level:4},{value:"<code>searchLabel?: string</code>",id:"searchlabel-string",level:4},{value:"<code>expandAll?: boolean</code>",id:"expandall-boolean",level:4},{value:"<code>displayDisabledItems?: boolean</code>",id:"displaydisableditems-boolean",level:4},{value:"<code>onItemsSelected?: (selectedIds: TreeItem[]) =&gt; void</code>",id:"onitemsselected-selectedids-treeitem--void",level:4},{value:"<code>onItemsExpanded?: (expandedItems: TreeItem[]) =&gt; void</code>",id:"onitemsexpanded-expandeditems-treeitem--void",level:4},{value:"Functions",id:"functions",level:3},{value:"buildTree(data: any, expandedIds: string[], selectedIds: string[])",id:"buildtreedata-any-expandedids-string-selectedids-string",level:4},{value:"Types",id:"types",level:3},{value:"TreeItem",id:"treeitem",level:4},{value:"<code>id: string</code>",id:"id-string",level:5},{value:"<code>parentId: string</code>",id:"parentid-string",level:5},{value:"<code>isExpanded: boolean</code>",id:"isexpanded-boolean",level:5},{value:"<code>isSelected: boolean</code>",id:"isselected-boolean",level:5},{value:"<code>isHidden: boolean</code>",id:"ishidden-boolean",level:5},{value:"<code>isDisabled: boolean</code>",id:"isdisabled-boolean",level:5},{value:"<code>name: string</code>",id:"name-string",level:5},{value:"<code>children: TreeItem[]</code>",id:"children-treeitem",level:5},{value:"<code>areAllChildrenSelected: boolean</code>",id:"areallchildrenselected-boolean",level:5}],m={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@availity/tree"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@availity/tree.svg?style=for-the-badge",alt:"Version"}))),(0,l.kt)("p",null,"This component builds out a hierarchical tree of objects, with the ability to expand/collapse, select, and search."),(0,l.kt)("h3",{id:"installation"},"Installation"),(0,l.kt)("p",null,"npm"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @availity/tree\n")),(0,l.kt)("p",null,"Yarn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @availity/tree\n")),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Tree, { buildTree, TreeItem } from '@availity/tree';\n\nconst Example = ({ myData }: Props) => (\n  const [valueList, setValueList] = useState<TreeItem[]>([]);\n  const [tree, setTree] = useState<TreeItem[]>([]);\n  const [initialState, setInitialState] = useState<TreeItem[]>([]);\n\n  const onSelected = (selectedItems: TreeItem[]) => {\n    setTentativeSelectList(selectedItems.map((item) => ({ code: item.id, value: item.name })));\n  };\n\n  const reset = () => {\n    setTentativeSelectList([]);\n    setTree(cloneDeep(initialState));\n  };\n\n  useEffect(() => {\n    // buildTree will construct a list of TreeItems as expected by the tree component\n    // this optionally allows you to pass an array of expandedIds and selectedIds\n    const tree = buildTree(myData, expandedIds, selectedIds);\n    await setInitialState(cloneDeep(tree));\n    await setTree(tree);\n  }, []);\n\n   return (\n        <>\n            <Tree\n                items={tree}\n                expandAll\n                enableSearch\n                selectedItems={valueList}\n                onItemsSelected={onSelected}\n            />\n            <Button id=\"btnResetTree\" onClick={() => reset()}>Reset Tree</Button>\n        </>\n    );\n);\n")),(0,l.kt)("h4",{id:"storybook"},"Storybook"),(0,l.kt)("p",null,"Checkout the ",(0,l.kt)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/story/components-tree--default"},"Storybook")," for interactive examples"),(0,l.kt)("h3",{id:"props"},"Props"),(0,l.kt)("h4",{id:"items-treeitem"},(0,l.kt)("inlineCode",{parentName:"h4"},"items: TreeItem[]")),(0,l.kt)("p",null,"Required. The list of items to display in the tree."),(0,l.kt)("h4",{id:"enablesearch-boolean"},(0,l.kt)("inlineCode",{parentName:"h4"},"enableSearch?: boolean")),(0,l.kt)("p",null,"Defaults to false. When enabled, there is a search input box that will display and allow for the user to limit the items in the tree based on the typed search value."),(0,l.kt)("h4",{id:"searchlabel-string"},(0,l.kt)("inlineCode",{parentName:"h4"},"searchLabel?: string")),(0,l.kt)("p",null,"The label that displays above the text box."),(0,l.kt)("h4",{id:"expandall-boolean"},(0,l.kt)("inlineCode",{parentName:"h4"},"expandAll?: boolean")),(0,l.kt)("p",null,"Defaults to false. When true, the tree view will be entirely expanded on initial load."),(0,l.kt)("h4",{id:"displaydisableditems-boolean"},(0,l.kt)("inlineCode",{parentName:"h4"},"displayDisabledItems?: boolean")),(0,l.kt)("p",null,"Defaults to true. When true, disabled items will be hidden in the tree."),(0,l.kt)("h4",{id:"onitemsselected-selectedids-treeitem--void"},(0,l.kt)("inlineCode",{parentName:"h4"},"onItemsSelected?: (selectedIds: TreeItem[]) => void")),(0,l.kt)("p",null,"Whenever an item is selected in the tree, it fires this event to let the parent know of the items that are selected."),(0,l.kt)("h4",{id:"onitemsexpanded-expandeditems-treeitem--void"},(0,l.kt)("inlineCode",{parentName:"h4"},"onItemsExpanded?: (expandedItems: TreeItem[]) => void")),(0,l.kt)("p",null,"Whenever an item is expanded in the tree, it fires this event."),(0,l.kt)("h3",{id:"functions"},"Functions"),(0,l.kt)("h4",{id:"buildtreedata-any-expandedids-string-selectedids-string"},"buildTree(data: any, expandedIds: string[], selectedIds: string[])"),(0,l.kt)("p",null,"Whenever the items are in a flat array, call this method to build the hierarchical list that is ready for the tree."),(0,l.kt)("h3",{id:"types"},"Types"),(0,l.kt)("h4",{id:"treeitem"},"TreeItem"),(0,l.kt)("h5",{id:"id-string"},(0,l.kt)("inlineCode",{parentName:"h5"},"id: string")),(0,l.kt)("h5",{id:"parentid-string"},(0,l.kt)("inlineCode",{parentName:"h5"},"parentId: string")),(0,l.kt)("h5",{id:"isexpanded-boolean"},(0,l.kt)("inlineCode",{parentName:"h5"},"isExpanded: boolean")),(0,l.kt)("h5",{id:"isselected-boolean"},(0,l.kt)("inlineCode",{parentName:"h5"},"isSelected: boolean")),(0,l.kt)("h5",{id:"ishidden-boolean"},(0,l.kt)("inlineCode",{parentName:"h5"},"isHidden: boolean")),(0,l.kt)("h5",{id:"isdisabled-boolean"},(0,l.kt)("inlineCode",{parentName:"h5"},"isDisabled: boolean")),(0,l.kt)("h5",{id:"name-string"},(0,l.kt)("inlineCode",{parentName:"h5"},"name: string")),(0,l.kt)("h5",{id:"children-treeitem"},(0,l.kt)("inlineCode",{parentName:"h5"},"children: TreeItem[]")),(0,l.kt)("h5",{id:"areallchildrenselected-boolean"},(0,l.kt)("inlineCode",{parentName:"h5"},"areAllChildrenSelected: boolean")))}u.isMDXComponent=!0}}]);