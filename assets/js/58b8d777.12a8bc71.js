"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[3204],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||r;return n?o.createElement(g,a(a({ref:t},s),{},{components:n})):o.createElement(g,a({ref:t},s))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9726:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var o=n(3117),i=n(102),r=(n(7294),n(3905)),a=["components"],l={title:"<PaginationContent />"},c=void 0,p={unversionedId:"components/pagination/content",id:"components/pagination/content",title:"<PaginationContent />",description:"This is the container of all the items rendered to the DOM when the Pagination provider receives items. Must be /nested inside a Pagination component.",source:"@site/docs/components/pagination/content.md",sourceDirName:"components/pagination",slug:"/components/pagination/content",permalink:"/availity-react/components/pagination/content",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/pagination/content.md",tags:[],version:"current",frontMatter:{title:"<PaginationContent />"},sidebar:"someSidebar",previous:{title:"<PaginationControls />",permalink:"/availity-react/components/pagination/controls"},next:{title:"<AvResourcePagination />",permalink:"/availity-react/components/pagination/resource"}},s={},d=[{value:"Example",id:"example",level:3},{value:"Props",id:"props",level:3},{value:"<code>component? React.ComponentType</code>",id:"component-reactcomponenttype",level:4},{value:"<code>itemKey: string</code>",id:"itemkey-string",level:4},{value:"<code>loadingMessage?: string</code>",id:"loadingmessage-string",level:4},{value:"<code>loader?: boolean</code>",id:"loader-boolean",level:4},{value:"<code>containerProps?: React.HTMLAttributes&lt;HTMLDivElement&gt;</code>",id:"containerprops-reacthtmlattributeshtmldivelement",level:4},{value:"<code>containerTag?: React.ComponentType | string</code>",id:"containertag-reactcomponenttype--string",level:4},{value:"<code>infiniteScroll?: boolean</code>",id:"infinitescroll-boolean",level:4},{value:"<code>infiniteScrollProps?: InfiniteScrollProps</code>",id:"infinitescrollprops-infinitescrollprops",level:4},{value:"<code>children?: React.ReactNode | ({ items?: ReactNode }) =&gt; ReactNode</code>",id:"children-reactreactnode---items-reactnode---reactnode",level:4}],m={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is the container of all the items rendered to the DOM when the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pagination")," provider receives items. Must be /nested inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"Pagination")," component."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { PaginationContent } from '@availity/pagination';\n\nconst Example = () => (\n  <PaginationContent\n    loadingMessage=\"loading\"\n    component={Component}\n    itemKey=\"id\"\n  />\n);\n")),(0,r.kt)("h3",{id:"props"},"Props"),(0,r.kt)("h4",{id:"component-reactcomponenttype"},(0,r.kt)("inlineCode",{parentName:"h4"},"component? React.ComponentType")),(0,r.kt)("p",null,"The component to render when iterating through the current page of items. The contents of the item will be spread on the props of the component when rendered."),(0,r.kt)("h4",{id:"itemkey-string"},(0,r.kt)("inlineCode",{parentName:"h4"},"itemKey: string")),(0,r.kt)("p",null,"The key of the object rendered in the component to be used during mapping."),(0,r.kt)("h4",{id:"loadingmessage-string"},(0,r.kt)("inlineCode",{parentName:"h4"},"loadingMessage?: string")),(0,r.kt)("p",null,"The message to render with the loading bar when in the loading state."),(0,r.kt)("h4",{id:"loader-boolean"},(0,r.kt)("inlineCode",{parentName:"h4"},"loader?: boolean")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", calls ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockUI")," to simulate a loading state if the provider is loading."),(0,r.kt)("h4",{id:"containerprops-reacthtmlattributeshtmldivelement"},(0,r.kt)("inlineCode",{parentName:"h4"},"containerProps?: React.HTMLAttributes<HTMLDivElement>")),(0,r.kt)("p",null,"Props to be spread onto the ",(0,r.kt)("inlineCode",{parentName:"p"},"<BlockUI />")," tag."),(0,r.kt)("h4",{id:"containertag-reactcomponenttype--string"},(0,r.kt)("inlineCode",{parentName:"h4"},"containerTag?: React.ComponentType | string")),(0,r.kt)("p",null,"The tag to render the ",(0,r.kt)("inlineCode",{parentName:"p"},"<BlockUI />")," as. ",(0,r.kt)("strong",{parentName:"p"},"Default:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,r.kt)("h4",{id:"infinitescroll-boolean"},(0,r.kt)("inlineCode",{parentName:"h4"},"infiniteScroll?: boolean")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", renders pagination content inside an infinite scroll component"),(0,r.kt)("h4",{id:"infinitescrollprops-infinitescrollprops"},(0,r.kt)("inlineCode",{parentName:"h4"},"infiniteScrollProps?: InfiniteScrollProps")),(0,r.kt)("p",null,"Only used when ",(0,r.kt)("inlineCode",{parentName:"p"},"infiniteScroll")," is true. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ankeetmaini/react-infinite-scroll-component#props"},"react-infinite-scroll-component")),(0,r.kt)("h4",{id:"children-reactreactnode---items-reactnode---reactnode"},(0,r.kt)("inlineCode",{parentName:"h4"},"children?: React.ReactNode | ({ items?: ReactNode }) => ReactNode")),(0,r.kt)("p",null,"Customize the contents of what gets rendered. Children can be a react child or a function that accepts the pagination items"))}u.isMDXComponent=!0}}]);