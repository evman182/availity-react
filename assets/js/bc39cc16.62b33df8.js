"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[1718],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=s(n),m=l,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,i=new Array(o);i[0]=c;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return u}});var a=n(3117),l=n(102),o=(n(7294),n(3905)),i=["components"],r={title:"<Select />"},p=void 0,s={unversionedId:"form/select/components/select",id:"form/select/components/select",title:"<Select />",description:"Select dropdown without a Label or Feedback",source:"@site/docs/form/select/components/select.md",sourceDirName:"form/select/components",slug:"/form/select/components/select",permalink:"/availity-react/form/select/components/select",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/select/components/select.md",tags:[],version:"current",frontMatter:{title:"<Select />"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/availity-react/form/select/"},next:{title:"<SelectField />",permalink:"/availity-react/form/select/components/select-field"}},d={},u=[{value:"Additional Resources",id:"additional-resources",level:3},{value:"Example",id:"example",level:3},{value:"Live example: Storybook",id:"live-example-storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>options: object[]</code>",id:"options-object",level:3},{value:"<code>raw?: boolean</code>",id:"raw-boolean",level:3},{value:"<code>valueKey?: string</code>",id:"valuekey-string",level:4},{value:"<code>labelKey?: string</code>",id:"labelkey-string",level:4},{value:"<code>helpMessage?: string</code>",id:"helpmessage-string",level:4},{value:"<code>feedback?: boolean</code>",id:"feedback-boolean",level:4},{value:"<code>required?: boolean</code>",id:"required-boolean",level:4},{value:"<code>maxLength?: number</code>",id:"maxlength-number",level:4},{value:"<code>selectRef?: Ref</code>",id:"selectref-ref",level:4},{value:"<code>createable?: boolean</code>",id:"createable-boolean",level:4},{value:"<code>allowSelectAll?: boolean</code>",id:"allowselectall-boolean",level:4},{value:"<code>clearButtonClassName?: string</code>",id:"clearbuttonclassname-string",level:4},{value:"<code>clearButtonText?: string</code>",id:"clearbuttontext-string",level:4},{value:"<code>clearButtonProps?: ButtonProps</code>",id:"clearbuttonprops-buttonprops",level:4},{value:"<code>waitUntilFocused?: boolean</code>",id:"waituntilfocused-boolean",level:3},{value:"<code>autofill?: boolean | AutoFillType</code>",id:"autofill-boolean--autofilltype",level:3}],c={toc:u};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Select dropdown without a Label or Feedback"),(0,o.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"selectStyles(showError, styles)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Extract styling of this component for cases when react-select is used directly."),(0,o.kt)("li",{parentName:"ul"},"Returns style and theme object to be spread on Select"),(0,o.kt)("li",{parentName:"ul"},"Args",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"showError?: boolean")," if error styling should be applied"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"styles?: StylesConfig object")," refer to react-select docs for info on styles")))))),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form } from '@availity/form';\nimport Select, { SelectField } from '@availity/select';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      justTheInput: undefined,\n    }}\n    onSubmit={(values) => window.alert(JSON.stringify(values))}\n    validationSchema={yup.object().shape({\n      justTheInput: yup.string().required('This field is required.'),\n    })}\n  >\n    <Select\n      id=\"justTheInput\"\n      name=\"justTheInput\"\n      isMulti={false}\n      options={[\n        { label: 'Option 1', value: 1 },\n        { label: 'Option 2', value: 2 },\n        { label: 'Option 3', value: 3 },\n      ]}\n    />\n\n    <Button className=\"mt-3\" color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n")),(0,o.kt)("h4",{id:"live-example-storybook"},"Live example: ",(0,o.kt)("a",{parentName:"h4",href:"https://availity.github.io/availity-react/storybook/?path=/story/formik-select--default"},"Storybook")),(0,o.kt)("h3",{id:"props"},"Props"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/JedWatson/react-select"},"react-select")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vtaits/react-select-async-paginate"},"react-select-async-paginate")," for additional props."),(0,o.kt)("h4",{id:"name-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"name: string")),(0,o.kt)("p",null,"The name of the field. Will be the key of the selected option(s) that come through in the values of the ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmit")," callback of the form."),(0,o.kt)("h3",{id:"options-object"},(0,o.kt)("inlineCode",{parentName:"h3"},"options: object[]")),(0,o.kt)("p",null,"Array of options that populate the select menu. Grouped options are also supported, but must include the property ",(0,o.kt)("inlineCode",{parentName:"p"},"type: 'group'"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const groupedOptions = [\n  {\n    label: 'options',\n    options: [\n      { label: 'Option 1', value: 'value for option 1' },\n      { label: 'Option 2', value: 'value for option 2' },\n      { label: 'Option 3', value: 'value for option 3' },\n      { label: 'Option 4', value: 'value for option 4' },\n    ],\n    type: 'group',\n  },\n];\n")),(0,o.kt)("h3",{id:"raw-boolean"},(0,o.kt)("inlineCode",{parentName:"h3"},"raw?: boolean")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the entire object of the selected value is returned as the value instead of the value for the ",(0,o.kt)("inlineCode",{parentName:"p"},"valueKey")," within the object."),(0,o.kt)("h4",{id:"valuekey-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"valueKey?: string")),(0,o.kt)("p",null,"The key of the value to return when selected. ",(0,o.kt)("strong",{parentName:"p"},"Default:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"value"')),(0,o.kt)("h4",{id:"labelkey-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"labelKey?: string")),(0,o.kt)("p",null,"The key of the label to render in the dropdown for the user to see. ",(0,o.kt)("strong",{parentName:"p"},"Default:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"label"')),(0,o.kt)("h4",{id:"helpmessage-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"helpMessage?: string")),(0,o.kt)("p",null,"Adds hidden help message to placeholder so it is read with ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-describedby")," (should match visible help message)."),(0,o.kt)("h4",{id:"feedback-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"feedback?: boolean")),(0,o.kt)("p",null,"Will add default ",(0,o.kt)("inlineCode",{parentName:"p"},"<Feedback />")," id to ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-errormessage"),"."),(0,o.kt)("h4",{id:"required-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"required?: boolean")),(0,o.kt)("p",null,"Will add ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-required")," to input."),(0,o.kt)("h4",{id:"maxlength-number"},(0,o.kt)("inlineCode",{parentName:"h4"},"maxLength?: number")),(0,o.kt)("p",null,"The maximum number of options that can be selected ( when ",(0,o.kt)("inlineCode",{parentName:"p"},"isMulti")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,o.kt)("h4",{id:"selectref-ref"},(0,o.kt)("inlineCode",{parentName:"h4"},"selectRef?: Ref")),(0,o.kt)("p",null,"Ref passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"react-select-async-paginate")," component if in async mode."),(0,o.kt)("h4",{id:"createable-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"createable?: boolean")),(0,o.kt)("p",null,"Allow new items to be created if not found. ",(0,o.kt)("strong",{parentName:"p"},"Default:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"allowselectall-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"allowSelectAll?: boolean")),(0,o.kt)("p",null,"Adds a ",(0,o.kt)("inlineCode",{parentName:"p"},"Select all")," option ( when ",(0,o.kt)("inlineCode",{parentName:"p"},"isMulti")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"). Note: ",(0,o.kt)("inlineCode",{parentName:"p"},"allowSelectAll")," is ignored when ",(0,o.kt)("inlineCode",{parentName:"p"},"loadOptions")," is defined."),(0,o.kt)("h4",{id:"clearbuttonclassname-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"clearButtonClassName?: string")),(0,o.kt)("p",null,"Class names to add to clear button (only available when ",(0,o.kt)("inlineCode",{parentName:"p"},"isMulti")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"isClearable"),"). ",(0,o.kt)("strong",{parentName:"p"},"Default:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"btn btn-link link")),(0,o.kt)("h4",{id:"clearbuttontext-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"clearButtonText?: string")),(0,o.kt)("p",null,"Text that should be displayed in the clear button (only available when ",(0,o.kt)("inlineCode",{parentName:"p"},"isMulti")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"isClearable"),"). ",(0,o.kt)("strong",{parentName:"p"},"Default:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"clear")),(0,o.kt)("h4",{id:"clearbuttonprops-buttonprops"},(0,o.kt)("inlineCode",{parentName:"h4"},"clearButtonProps?: ButtonProps")),(0,o.kt)("p",null,"Additional properties that should be set on the clear button (only available when ",(0,o.kt)("inlineCode",{parentName:"p"},"isMulti")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"isClearable"),")."),(0,o.kt)("h3",{id:"waituntilfocused-boolean"},(0,o.kt)("inlineCode",{parentName:"h3"},"waitUntilFocused?: boolean")),(0,o.kt)("p",null,"When true, the network request is not made until the dropdown has been focused. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h3",{id:"autofill-boolean--autofilltype"},(0,o.kt)("inlineCode",{parentName:"h3"},"autofill?: boolean | AutoFillType")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", when the value of the dropdown changes, if the ",(0,o.kt)("inlineCode",{parentName:"p"},"isMulti")," prop is ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," ",(0,o.kt)("em",{parentName:"p"},"and")," the new value of the dropdown is an object, all fields on the form corresponding to the new value are auto-filled. In order for a field to be auto-filled, the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property on the field ",(0,o.kt)("em",{parentName:"p"},"must")," match the key inside the new value."),(0,o.kt)("p",null,"For example, if the new value is ",(0,o.kt)("inlineCode",{parentName:"p"},'{ "payer": "Availity" }'),', in order for the payer input in the form to be auto-filled to "Availity", the ',(0,o.kt)("inlineCode",{parentName:"p"},"name"),' prop on the input must be "payer".'),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"autofill")," is an object, when the value of the dropdown changes, if the ",(0,o.kt)("inlineCode",{parentName:"p"},"isMulti")," prop is ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," ",(0,o.kt)("em",{parentName:"p"},"and")," the new value of the dropdown is an object, all fields on the form corresponding to the keys in the ",(0,o.kt)("inlineCode",{parentName:"p"},"autofill")," prop will be auto-filled."),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"autofill")," is an object, the values in the object can be a string or a function. When a string, the key in the ",(0,o.kt)("inlineCode",{parentName:"p"},"autofill")," prop gets auto-filled to that path on the selected option. When a function, it gets called with the selected option, and the key in the ",(0,o.kt)("inlineCode",{parentName:"p"},"autofill")," prop gets auto-filled to the return value of the function."),(0,o.kt)("p",null,"For example, if the new value is ",(0,o.kt)("inlineCode",{parentName:"p"},'{ "payer": { "name": "Availity", "id": "1" } }'),', in order for the "payerName", "payerId", and "payerNameAndId" inputs to be auto-filled to "Availity", "1", and "1 - Availity" respectively, the ',(0,o.kt)("inlineCode",{parentName:"p"},"autofill")," prop should be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  payerName: 'payer.name',\n  payerId: 'payer.id',\n  payerNameAndId: opt => `${opt.payer.id} - ${opt.payer.name}`,\n}\n")))}m.isMDXComponent=!0}}]);