"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[796],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,f=m["".concat(p,".").concat(u)]||m[u]||s[u]||o;return n?a.createElement(f,r(r({ref:t},c),{},{components:n})):a.createElement(f,r({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1219:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return s}});var a=n(3117),i=n(102),o=(n(7294),n(3905)),r=["components"],l={title:"<Date />"},p=void 0,d={unversionedId:"form/date/components/date",id:"form/date/components/date",title:"<Date />",description:"Date picker without a Label or Feedback",source:"@site/docs/form/date/components/date.md",sourceDirName:"form/date/components",slug:"/form/date/components/date",permalink:"/availity-react/form/date/components/date",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/date/components/date.md",tags:[],version:"current",frontMatter:{title:"<Date />"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/availity-react/form/date/"},next:{title:"<DateField />",permalink:"/availity-react/form/date/components/date-field"}},c={},s=[{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>disabled?: boolean</code>",id:"disabled-boolean",level:4},{value:"<code>min?: string | LimitType</code>",id:"min-string--limittype",level:4},{value:"<code>max?: string | LimitType</code>",id:"max-string--limittype",level:4},{value:"<code>onPickerFocusChange?: ({ focused: boolean }) =&gt; void</code>",id:"onpickerfocuschange--focused-boolean---void",level:4},{value:"<code>format?: string</code>",id:"format-string",level:4},{value:"<code>datePickerProps?: SingleDatePickerShape</code>",id:"datepickerprops-singledatepickershape",level:4},{value:"<code>openDirection?: string</code>",id:"opendirection-string",level:4},{value:"Yup Validation",id:"yup-validation",level:3}],m={toc:s};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Date picker without a ",(0,o.kt)("inlineCode",{parentName:"p"},"Label")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Feedback")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"initialValues")," need to be specified for a Date or DateRange, they should be in the format ",(0,o.kt)("inlineCode",{parentName:"p"},'"YYYY-MM-DD"')," or ",(0,o.kt)("inlineCode",{parentName:"p"},'moment().format("YYYY-MM-DD")'),", even though dates are displayed to the user as ",(0,o.kt)("inlineCode",{parentName:"p"},"MM/DD/YYYY")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form } from '@availity/form';\nimport { avDate } from '@availity/yup';\nimport { Button } from 'reactstrap';\nimport Date from '@availity/date';\nimport '@availity/date/styles.scss';\nimport moment from 'moment';\nimport * as yup from 'yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      dateOfService: '',\n    }}\n    onSubmit={(values) => console.log(values)}\n    validationSchema={yup.object().shape({\n      dateOfService: avDate().required(),\n    })}\n  >\n    <Date\n      id=\"dateOfService\"\n      name=\"dateOfService\"\n      min={{ value: 7, units: 'day' }}\n      max={{ value: 7, units: 'day' }}\n    />\n    <Button color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n")),(0,o.kt)("h4",{id:"live-example"},"Live example"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/docs/form-components-date--date-input"},"Storybook")),(0,o.kt)("h3",{id:"props"},"Props"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/airbnb/react-dates#singledatepicker"},"react-dates")," for additional props"),(0,o.kt)("h4",{id:"name-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"name: string")),(0,o.kt)("p",null,"The name of the field. Will be the key of the selected date that comes through in the values of the ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmit")," callback."),(0,o.kt)("h4",{id:"disabled-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"disabled?: boolean")),(0,o.kt)("p",null,"Whether the date is disabled."),(0,o.kt)("h4",{id:"min-string--limittype"},(0,o.kt)("inlineCode",{parentName:"h4"},"min?: string | LimitType")),(0,o.kt)("p",null,"Used in conjunction with ",(0,o.kt)("inlineCode",{parentName:"p"},"max")," to derive ",(0,o.kt)("inlineCode",{parentName:"p"},"isOutsideRange")," prop from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-dates")," and selectable year options in datepicker. Dates outside the allowed range will not be clickable in datepicker."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"hideCopy=true",hideCopy:"true"},'{\n  // LimitType\n  "value": "12",\n  "units": "day"\n}\n')),(0,o.kt)("h4",{id:"max-string--limittype"},(0,o.kt)("inlineCode",{parentName:"h4"},"max?: string | LimitType")),(0,o.kt)("p",null,"Used in conjunction with ",(0,o.kt)("inlineCode",{parentName:"p"},"min")," to derive ",(0,o.kt)("inlineCode",{parentName:"p"},"isOutsideRange")," prop from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-dates")," and selectable year options in datepicker. Dates outside the allowed range will not be clickable in datepicker."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"hideCopy=true",hideCopy:"true"},'{\n  // LimitType\n  "value": "12",\n  "units": "day"\n}\n')),(0,o.kt)("h4",{id:"onpickerfocuschange--focused-boolean---void"},(0,o.kt)("inlineCode",{parentName:"h4"},"onPickerFocusChange?: ({ focused: boolean }) => void")),(0,o.kt)("p",null,"Function to be run when focus on the input changes."),(0,o.kt)("h4",{id:"format-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"format?: string")),(0,o.kt)("p",null,"How to format date value in ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmit")," callback. Must be a format recognized by ",(0,o.kt)("a",{parentName:"p",href:"https://momentjs.com/docs/#/displaying/format/"},"moment"),". ",(0,o.kt)("strong",{parentName:"p"},"Default: ",(0,o.kt)("inlineCode",{parentName:"strong"},"MM/DD/YYYY"))),(0,o.kt)("h4",{id:"datepickerprops-singledatepickershape"},(0,o.kt)("inlineCode",{parentName:"h4"},"datePickerProps?: SingleDatePickerShape")),(0,o.kt)("p",null,"Props to be spread onto the datepicker component from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/airbnb/react-dates#singledatepicker"},"react-dates"),"."),(0,o.kt)("h4",{id:"opendirection-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"openDirection?: string")),(0,o.kt)("p",null,"Set which direction the date picker renders. Possible values are ",(0,o.kt)("inlineCode",{parentName:"p"},"up")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"down"),". Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"down")),(0,o.kt)("h3",{id:"yup-validation"},"Yup Validation"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"When the existence of ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," component's field value is used with something like ",(0,o.kt)("inlineCode",{parentName:"p"},"yup.when()")," to help validate another field in the schema, you cannot depend on the truthiness of that field value alone. A ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," field that has had a value erased does not return to its ",(0,o.kt)("inlineCode",{parentName:"p"},"initialValue"),", instead it is now a ",(0,o.kt)("inlineCode",{parentName:"p"},"moment")," object that will pass a truthy check. Your conditional validation should take this into account.")))}u.isMDXComponent=!0}}]);