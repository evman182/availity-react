"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[8677],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(r),h=a,d=m["".concat(l,".").concat(h)]||m[h]||c[h]||i;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8652:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],s={title:"useAuthorize"},l=void 0,u={unversionedId:"components/authorize/useAuthorize",id:"components/authorize/useAuthorize",title:"useAuthorize",description:"The useAuthorize hook accepts a list of permissions, with optional parameters, and will return whether the user is authorized or not.",source:"@site/docs/components/authorize/useAuthorize.mdx",sourceDirName:"components/authorize",slug:"/components/authorize/useAuthorize",permalink:"/availity-react/components/authorize/useAuthorize",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/authorize/useAuthorize.mdx",tags:[],version:"current",frontMatter:{title:"useAuthorize"},sidebar:"someSidebar",previous:{title:"Authorize",permalink:"/availity-react/components/authorize/authorize"},next:{title:"Avatar",permalink:"/availity-react/components/avatar"}},p={},c=[{value:"Args",id:"args",level:2},{value:"Return Object",id:"return-object",level:2},{value:"Example",id:"example",level:2},{value:"Storybook",id:"storybook",level:2}],m={toc:c};function h(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useAuthorize")," hook accepts a list of permissions, with optional parameters, and will return whether the user is authorized or not."),(0,i.kt)("p",null,"This package uses ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"react-query")," to handle data fetching. This means you must add a ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/QueryClientProvider#_top"},"QueryClientProvider")," to your app if you do not already have one. The default setup should cover most use-cases. However, there are 2 options we recommend looking into in order to determine what is correct for your app. These settings are ",(0,i.kt)("inlineCode",{parentName:"p"},"refetchOnWindowFocus")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"staleTime"),". The first option sets whether the to refetch the query when the window is focused, and the other is the default marker for how long the query is valid."),(0,i.kt)("h2",{id:"args"},"Args"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"permissions")),": (string | string[])[]. Required.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"string"),": The permission ID, eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"'1234'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"array"),": The array can contain Permission ID's as well as other arrays which contain Permission ID's eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"['1234', '2345', ['3456', '4567'], ['5678', '6789']]"),". The items in a nested array indicate Permission ID's that must ",(0,i.kt)("em",{parentName:"li"},"all")," be granted to the user to be considered authorized - they act as an ",(0,i.kt)("inlineCode",{parentName:"li"},'"AND"'),". The items in the top of the array act as an ",(0,i.kt)("inlineCode",{parentName:"li"},'"OR"')," - if ",(0,i.kt)("em",{parentName:"li"},"any")," are granted to the user, the user is considered authorized. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"['1234', '2345', ['3456', '4567'], ['5678', '6789']]")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"li"},"'1234' || '2345' || ('3456' && '4567') || ('5678' && '6789')"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"options"))," Object. Optional. Additional options",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"organizationId")),": String. Optional. When present, the permission is validated to ensure it is assigned to the organization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"customerId")),": String. Optional. When present, the permission is validated to ensure it is assigned to the customer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"region")),": String or Boolean. Optional. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),". When a string, the permission is validated to ensure it is assigned in the provided region. When true, the permission is validated to ensure it is assigned in the current region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"resources")),": (string | string[])[]. Optional.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"string"),": The Resource ID, eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"'12345'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"array"),": The array can contain Resource ID's as well as other arrays which contain Resource ID's eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"['12345', '23456', ['34567', '45678'], ['56789', '67890']]"),". The items in a nested array indicate the Resource ID's that must ",(0,i.kt)("em",{parentName:"li"},"all")," be granted to the user to be considered authorized - they act as an ",(0,i.kt)("inlineCode",{parentName:"li"},'"AND"'),". The items in the top of the array act as an ",(0,i.kt)("inlineCode",{parentName:"li"},'"OR"')," - if ",(0,i.kt)("em",{parentName:"li"},"any")," are granted to the user, the user is considered authorized. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"['12345', '23456', ['34567', '45678'], ['56789', '67890']]")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"li"},"'12345' || '23456' || ('34567' && '45678') || ('56789' && '67890')"),".")))))),(0,i.kt)("h2",{id:"return-object"},"Return Object"),(0,i.kt)("p",null,"An object with two properties is returned from the call"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type ReturnObject = {\n  /* Result of permission check */\n  authorized: boolean;\n  /* State of the api call */\n  isLoading: boolean;\n};\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useAuthorize } from '@availity/authorize';\n\nconst Component = () => {\n  const { authorized, isLoading } = useAuthorize(['1234', '5678'], {\n    region: 'FL',\n  });\n\n  return authorized && <SomeAuthorizedComponent />;\n};\n")),(0,i.kt)("h2",{id:"storybook"},"Storybook"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/story/components-authorize--use-authorize"},"Live Example")))}h.isMDXComponent=!0}}]);