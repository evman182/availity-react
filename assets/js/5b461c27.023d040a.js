"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[7259],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=m(n),c=a,v=s["".concat(p,".").concat(c)]||s[c]||d[c]||i;return n?r.createElement(v,o(o({ref:t},u),{},{components:n})):r.createElement(v,o({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5371:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return d}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],l={title:"Migrating from reactstrap validation"},p=void 0,m={unversionedId:"form/migrating",id:"form/migrating",title:"Migrating from reactstrap validation",description:"The primary difference in developing with availity-reactstrap-validation and @availity/form is validation. With availity-reactstrap-validation, we define validation schemas on the input components in the form with the validate prop, like so:",source:"@site/docs/form/migrating.md",sourceDirName:"form",slug:"/form/migrating",permalink:"/availity-react/form/migrating",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/migrating.md",tags:[],version:"current",frontMatter:{title:"Migrating from reactstrap validation"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/availity-react/form/"},next:{title:"<CheckboxGroup />",permalink:"/availity-react/form/components/checkbox-group"}},u={},d=[{value:"Form with <code>availity-reactstrap-validation</code>",id:"form-with-availity-reactstrap-validation",level:2},{value:"Equivalent Form with <code>@availity/form</code>",id:"equivalent-form-with-availityform",level:2}],s={toc:d};function c(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The primary difference in developing with ",(0,i.kt)("inlineCode",{parentName:"p"},"availity-reactstrap-validation")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@availity/form")," is validation. With ",(0,i.kt)("inlineCode",{parentName:"p"},"availity-reactstrap-validation"),", we define validation schemas on the input components in the form with the ",(0,i.kt)("inlineCode",{parentName:"p"},"validate")," prop, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { AvInput, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm>\n      <AvInput\n        name=\"myInput\"\n        type=\"text\"\n        validate={{\n          required: {\n            value: true,\n            errorMessage: 'This field is required.',\n          },\n        }}\n      />\n    </AvForm>\n  );\n};\n")),(0,i.kt)("p",null,"Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"availity-reactstrap-validation")," also has a ",(0,i.kt)("inlineCode",{parentName:"p"},"required")," prop that acts as a shorthand for required validation using the ",(0,i.kt)("inlineCode",{parentName:"p"},"validate")," prop. The code snippet above is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { AvInput, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm>\n      <AvInput name=\"myInput\" type=\"text\" required />\n    </AvForm>\n  );\n};\n")),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"@availity/form"),", we use ",(0,i.kt)("inlineCode",{parentName:"p"},"yup")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@availity/yup")," to define the validation schema for all of the inputs in the form on the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Form />")," component with the ",(0,i.kt)("inlineCode",{parentName:"p"},"validationSchema")," prop from ",(0,i.kt)("a",{parentName:"p",href:"https://jaredpalmer.com/formik/docs/guides/validation#validationschema"},"formik"),", like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Input, Form } from '@availity/form';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => {\n  return (\n    <Form\n      initialValues={{ myInput: '' }}\n      validationSchema={yup.object().shape({\n        myInput: yup.string().isRequired(true, 'This field is required.'),\n      })}\n    >\n      <Input name=\"myInput\" type=\"text\" />\n    </Form>\n  );\n};\n")),(0,i.kt)("p",null,"Another key difference is we define the initial state of the inputs in the form with the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialValues")," prop from ",(0,i.kt)("a",{parentName:"p",href:"https://jaredpalmer.com/formik/docs/api/formik#initialvalues-values"},"formik")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Form />")," component."),(0,i.kt)("h2",{id:"form-with-availity-reactstrap-validation"},"Form with ",(0,i.kt)("inlineCode",{parentName:"h2"},"availity-reactstrap-validation")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { AvField, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm onValidSubmit={() => {}}>\n      <AvField\n        name=\"memberId\"\n        type=\"text\"\n        label=\"Member ID\"\n        validate={{\n          pattern: {\n            value: 'd{8}',\n            errorMessage: 'Member ID must be 8 digits',\n          },\n          required: {\n            value: true,\n            errorMessage: 'This Field is Required.',\n          },\n        }}\n      />\n      <AvField\n        name=\"zipCode\"\n        type=\"text\"\n        label=\"Zip Code\"\n        validate={{\n          pattern: {\n            value: '^d{5}(?:-d{4})?$',\n            errorMessage: 'Valid Zip Code Formats: 12345 or 12345-6789',\n          },\n          required: {\n            value: true,\n            errorMessage: 'This Field is Required.',\n          },\n        }}\n      />\n    </AvForm>\n  );\n};\n")),(0,i.kt)("h2",{id:"equivalent-form-with-availityform"},"Equivalent Form with ",(0,i.kt)("inlineCode",{parentName:"h2"},"@availity/form")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Field, Form } from '@availity/form';\nimport '@availity/yup';\nimport * as yup from 'yup';\n\nconst Example = () => {\n  return (\n    <Form\n      onSubmit={() => {}}\n      initialValues={{\n        memberId: '',\n        zipCode: '',\n      }}\n      validationSchema={yup.object().shape({\n        memberId: yup\n          .string()\n          .isRequired(true, 'This Field is Required.')\n          .matches(/^\\d{8}$/, 'Member ID must be 8 digits.'),\n        zipCode: yup\n          .string()\n          .isRequired(true, 'This Field is Required.')\n          .matches(\n            /^\\d{5}(?:-\\d{4})?$/,\n            'Valid Zip Code Formats: 12345 or 12345-6789'\n          ),\n      })}\n    >\n      <Field name=\"memberId\" type=\"text\" label=\"Member ID\" />\n      <Field name=\"zipCode\" type=\"text\" label=\"Zip Code\" />\n    </Form>\n  );\n};\n")))}c.isMDXComponent=!0}}]);