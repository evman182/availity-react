"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[1836],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6148:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var o=t(3117),r=t(102),a=(t(7294),t(3905)),i=["components"],l={title:"<Phone />"},p=void 0,s={unversionedId:"form/phone/components/phone",id:"form/phone/components/phone",title:"<Phone />",description:"Availity Phone component using Formik and Yup",source:"@site/docs/form/phone/components/phone.md",sourceDirName:"form/phone/components",slug:"/form/phone/components/phone",permalink:"/availity-react/form/phone/components/phone",draft:!1,editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/phone/components/phone.md",tags:[],version:"current",frontMatter:{title:"<Phone />"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/availity-react/form/phone/"},next:{title:"validatePhone",permalink:"/availity-react/form/phone/components/validate-phone"}},c={},d=[{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>label?: string</code>",id:"label-string",level:4},{value:"<code>country?: string</code>",id:"country-string",level:4},{value:"<code>showExtension?: boolean</code>",id:"showextension-boolean",level:4},{value:"<code>extProps?: object</code>",id:"extprops-object",level:4},{value:"<code>phoneColProps?: object</code>",id:"phonecolprops-object",level:4},{value:"<code>extColProps?: object</code>",id:"extcolprops-object",level:4},{value:"<code>restPhoneProps</code> &amp; <code>restExtProps</code>",id:"restphoneprops--restextprops",level:4},{value:"Lazy Loading and Suspense",id:"lazy-loading-and-suspense",level:3}],u={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Availity Phone component using Formik and Yup"),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form } from '@availity/form';\nimport { Phone, validatePhone } from '@availity/phone';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      phone: '',\n      ext: '',\n    }}\n    onSubmit={(values) => alert(JSON.stringify(values))}\n    validationSchema={yup.object({\n      phone: yup.string().validatePhone().isRequired(true),\n      ext: yup.string(),\n    })}\n  >\n    <Phone\n      name=\"phone\"\n      label=\"Phone\"\n      country=\"US\"\n      showExtension={true}\n      phoneColProps={{ xs: { size: 9 } }}\n      extProps={{\n        name: 'ext',\n        label: 'Ext.',\n        extColProps: {\n          xs: { size: 3 },\n        },\n      }}\n    />\n    <Button type=\"submit\" color=\"primary\">\n      Submit\n    </Button>\n  </Form>\n);\n")),(0,a.kt)("h4",{id:"live-example"},"Live example"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/docs/form-components-phone--default"},"Storybook")),(0,a.kt)("h3",{id:"props"},"Props"),(0,a.kt)("h4",{id:"name-string"},(0,a.kt)("inlineCode",{parentName:"h4"},"name: string")),(0,a.kt)("p",null,"Identifies the field and matches the validation schema."),(0,a.kt)("h4",{id:"label-string"},(0,a.kt)("inlineCode",{parentName:"h4"},"label?: string")),(0,a.kt)("p",null,"Displays a Reactstrap ",(0,a.kt)("inlineCode",{parentName:"p"},"<Label />")," for the field."),(0,a.kt)("h4",{id:"country-string"},(0,a.kt)("inlineCode",{parentName:"h4"},"country?: string")),(0,a.kt)("p",null,"Default country for parsing national numbers. This is the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"},"two letter ISO country code"),". If no code is provided, the default is ",(0,a.kt)("inlineCode",{parentName:"p"},"'US'"),"."),(0,a.kt)("h4",{id:"showextension-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"showExtension?: boolean")),(0,a.kt)("p",null,"Enable the phone extension field. This is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("h4",{id:"extprops-object"},(0,a.kt)("inlineCode",{parentName:"h4"},"extProps?: object")),(0,a.kt)("p",null,"Used to pass props to the extension field when it is enabled."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "",\n  "label": "",\n  "extColProps": {}\n}\n')),(0,a.kt)("h4",{id:"phonecolprops-object"},(0,a.kt)("inlineCode",{parentName:"h4"},"phoneColProps?: object")),(0,a.kt)("p",null,"Used to control props on the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Col />")," for the phone field, if needed. The phone column defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"xs: { size: 12 }")," when not rendering an extension field, and defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"xs: { size: 10 }")," when rendering an extension field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "xs": {\n    "size": 9\n  },\n  "sm": {\n    "size": 10\n  }\n}\n')),(0,a.kt)("h4",{id:"extcolprops-object"},(0,a.kt)("inlineCode",{parentName:"h4"},"extColProps?: object")),(0,a.kt)("p",null,"Used to control props on ",(0,a.kt)("inlineCode",{parentName:"p"},"<Col />")," for the extension field, if needed. The extension column has no default size value, so it's default will effectively be ",(0,a.kt)("inlineCode",{parentName:"p"},"size: { 12 - phoneColSize }")," unless otherwise specified."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "xs": {\n    "size": 3\n  },\n  "sm": {\n    "size": 2\n  }\n}\n')),(0,a.kt)("h4",{id:"restphoneprops--restextprops"},(0,a.kt)("inlineCode",{parentName:"h4"},"restPhoneProps")," & ",(0,a.kt)("inlineCode",{parentName:"h4"},"restExtProps")),(0,a.kt)("p",null,"These are respectively spread onto the corresponding ",(0,a.kt)("inlineCode",{parentName:"p"},"@availity/form")," ",(0,a.kt)("inlineCode",{parentName:"p"},"<Field />")," components, so props like ",(0,a.kt)("inlineCode",{parentName:"p"},"grid")," can be used on the phone and extension fields."),(0,a.kt)("h3",{id:"lazy-loading-and-suspense"},"Lazy Loading and Suspense"),(0,a.kt)("p",null,"Because ",(0,a.kt)("inlineCode",{parentName:"p"},"libphonenumber-js")," has a relatively large package size, it is recommended that ",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/code-splitting.html#reactlazy"},"lazy loading and suspense")," are utilized with this component. This will give your app the benefit of Code-Splitting, and the bundle containing ",(0,a.kt)("inlineCode",{parentName:"p"},"libphonenumber-js")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Phone />")," component will be loaded automatically when the component is first rendered. While the component is being loaded, a ",(0,a.kt)("inlineCode",{parentName:"p"},"fallback")," component will be rendered to show the user some placeholder content in the meantime."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { Suspense } from 'react';\n\nconst Phone = React.lazy(() => import('./Phone'));\n\nfunction MyApp() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Phone />\n      </Suspense>\n    </div>\n  );\n}\n")))}m.isMDXComponent=!0}}]);